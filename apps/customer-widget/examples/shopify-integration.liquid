{% comment %}
  Delivery Scheduler Widget Integration Example
  Add this to your cart.liquid template or create a new section
{% endcomment %}

{%- liquid
  # Widget configuration - customize these values
  assign widget_config = {
    apiUrl: 'https://your-api-domain.com',
    shopDomain: shop.permanent_domain,
    theme: 'light',
    language: shop.locale,
    currency: shop.currency,
    timezone: shop.timezone,
    showProductAvailability: true,
    allowExpressDelivery: true,
    maxFutureDays: 120,
    enablePostalCodeValidation: true,
    enablePostalCodeAutoComplete: true,
    postalCodeAutoCompleteDelay: 500,
    showPostalCodeSuggestions: true,
    maxPostalCodeSuggestions: 5
  }
-%}

<div class="delivery-scheduler-section" style="margin: 20px 0; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; background-color: #f9fafb;">
  
  <h3 style="margin: 0 0 16px 0; font-size: 18px; font-weight: 600; color: #111827;">
    {{ 'cart.delivery_options.title' | t: default: 'Delivery Options' }}
  </h3>

  {%- comment -%} Widget container {%- endcomment -%}
  <div id="delivery-scheduler-widget"></div>

  {%- comment -%} Loading state {%- endcomment -%}
  <div id="delivery-scheduler-loading" style="text-align: center; padding: 20px; color: #6b7280;">
    <div style="margin-bottom: 8px;">Loading delivery options...</div>
    <div style="width: 20px; height: 20px; border: 2px solid #e5e7eb; border-top: 2px solid #2563eb; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto;"></div>
  </div>

  {%- comment -%} Error state {%- endcomment -%}
  <div id="delivery-scheduler-error" style="display: none; padding: 12px; background-color: #fef2f2; border: 1px solid #fecaca; border-radius: 6px; color: #dc2626; font-size: 14px;">
    Unable to load delivery options. Please refresh the page or contact support.
  </div>

  {%- comment -%} Selected delivery info {%- endcomment -%}
  <div id="delivery-summary" style="display: none; margin-top: 16px; padding: 16px; background-color: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 6px;">
    <h4 style="margin: 0 0 8px 0; font-size: 14px; font-weight: 600; color: #0c4a6e;">
      {{ 'cart.delivery_summary.title' | t: default: 'Delivery Summary' }}
    </h4>
    <div id="delivery-summary-content" style="font-size: 14px; color: #0c4a6e;"></div>
  </div>

</div>

{%- comment -%} Widget script {%- endcomment -%}
<script>
  (function() {
    'use strict';

    // Widget configuration
    const widgetConfig = {{ widget_config | json }};
    
    // DOM elements
    const widgetContainer = document.getElementById('delivery-scheduler-widget');
    const loadingElement = document.getElementById('delivery-scheduler-loading');
    const errorElement = document.getElementById('delivery-scheduler-error');
    const summaryElement = document.getElementById('delivery-summary');
    const summaryContent = document.getElementById('delivery-summary-content');

    // State
    let selectedDelivery = null;
    let widgetInstance = null;

    // Show/hide elements
    function showLoading() {
      loadingElement.style.display = 'block';
      errorElement.style.display = 'none';
      summaryElement.style.display = 'none';
    }

    function hideLoading() {
      loadingElement.style.display = 'none';
    }

    function showError(message) {
      errorElement.textContent = message;
      errorElement.style.display = 'block';
      hideLoading();
    }

    function updateSummary(delivery) {
      if (!delivery) {
        summaryElement.style.display = 'none';
        return;
      }

      const { date, timeSlot, area } = delivery;
      const formattedDate = new Date(date).toLocaleDateString('en-CA', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });

      summaryContent.innerHTML = `
        <div style="margin-bottom: 4px;"><strong>Date:</strong> ${formattedDate}</div>
        <div style="margin-bottom: 4px;"><strong>Time:</strong> ${timeSlot}</div>
        <div style="margin-bottom: 4px;"><strong>Area:</strong> ${area.name}</div>
        <div><strong>Delivery Fee:</strong> ${widgetConfig.currency} ${area.deliveryFee}</div>
      `;

      summaryElement.style.display = 'block';
    }

    // Handle widget events
    function handleWidgetEvent(event) {
      const { type, payload } = event.detail;
      
      console.log('Delivery scheduler event:', type, payload);

      switch (type) {
        case 'POSTAL_CODE_VALIDATED':
          if (payload.isValid) {
            // Update cart with delivery area info
            updateCartDeliveryArea(payload.area);
          }
          break;

        case 'DELIVERY_DATE_SELECTED':
          selectedDelivery = {
            ...selectedDelivery,
            date: payload.date,
            timeSlotId: payload.timeslotId
          };
          break;

        case 'DELIVERY_AREA_SELECTED':
          selectedDelivery = {
            ...selectedDelivery,
            area: payload
          };
          updateSummary(selectedDelivery);
          break;

        case 'AVAILABILITY_CHECKED':
          // Handle availability updates
          break;

        case 'ERROR':
          console.error('Widget error:', payload);
          showError(payload.message);
          break;
      }
    }

    // Update Shopify cart with delivery information
    function updateCartDeliveryArea(area) {
      // Add delivery area as a cart attribute
      const formData = {
        'attributes[delivery_area]': area.name,
        'attributes[delivery_fee]': area.deliveryFee.toString(),
        'attributes[delivery_area_id]': area.id.toString()
      };

      fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.token) {
          console.log('Cart updated with delivery area:', area.name);
          // Trigger cart update event for other scripts
          document.dispatchEvent(new CustomEvent('cart:updated', { detail: data }));
        }
      })
      .catch(error => {
        console.error('Failed to update cart:', error);
      });
    }

    // Load widget script
    function loadWidget() {
      return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = '{{ "delivery-scheduler.js" | asset_url }}';
        script.onload = resolve;
        script.onerror = () => reject(new Error('Failed to load widget script'));
        
        // Set configuration attributes
        script.setAttribute('data-container', 'delivery-scheduler-widget');
        script.setAttribute('data-config', JSON.stringify(widgetConfig));
        
        document.head.appendChild(script);
      });
    }

    // Initialize widget
    async function initWidget() {
      try {
        showLoading();
        
        // Load widget script
        await loadWidget();
        
        // Wait for widget to initialize
        setTimeout(() => {
          if (window.DeliveryScheduler) {
            // Widget loaded successfully
            hideLoading();
            
            // Listen for widget events
            document.addEventListener('delivery-scheduler-event', handleWidgetEvent);
            
            // Store widget instance for later use
            widgetInstance = window.DeliveryScheduler;
            
            console.log('Delivery scheduler widget loaded successfully');
          } else {
            showError('Widget failed to initialize');
          }
        }, 1000);

      } catch (error) {
        console.error('Failed to load delivery scheduler widget:', error);
        showError('Failed to load delivery options');
      }
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initWidget);
    } else {
      initWidget();
    }

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (widgetInstance && widgetInstance.destroy) {
        widgetInstance.destroy();
      }
    });

  })();

  // CSS for loading animation
  const style = document.createElement('style');
  style.textContent = `
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  `;
  document.head.appendChild(style);
</script>

{%- comment -%} Additional cart integration {%- endcomment -%}
<script>
  // Listen for cart updates and refresh widget if needed
  document.addEventListener('cart:updated', function(event) {
    const cart = event.detail;
    
    // Check if cart has items that require delivery
    const hasPhysicalItems = cart.items.some(item => item.requires_shipping);
    
    if (!hasPhysicalItems) {
      // Hide delivery scheduler if no physical items
      document.querySelector('.delivery-scheduler-section').style.display = 'none';
    } else {
      // Show delivery scheduler
      document.querySelector('.delivery-scheduler-section').style.display = 'block';
    }
  });

  // Update delivery fee in cart totals
  function updateDeliveryFee(fee) {
    const deliveryFeeElement = document.querySelector('.delivery-fee');
    if (deliveryFeeElement) {
      deliveryFeeElement.textContent = `$${fee.toFixed(2)}`;
    }
  }
</script> 